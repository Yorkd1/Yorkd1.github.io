---
title: "Client Report - [Insert Project Title]"
subtitle: "Course DS 250"
author: "[STUDENT NAME]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
import plotly.express as px
import sqlite3
```


### Elevator pitch

_In recent years BYU-I has not had an official baseball team. However, there are quite a number of players that went on to play in the major leagues. In this data I will present all the players that had attened Brigham Young University of Idaho as well as some of the players stats including salary, batting averages, as well as how two teams compare to eachother. Even if you are not a baseball fan, the data shared is pretty interesting._

```{python}
#| label: project-data
#| code-summary: Read and format
#| include: false
# Include and execute your code here
sql_file = '../lahmansbaseballdb.sqlite'
```


### Players That Attended BYU-I

__Write an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report.__

_Doing a bit of digging we can see that there are only two players who attended BYU-I. Due to Ricks College transitioning into a four-year institution the athletics program was dropped due to financial concerns, and the data shows that BYU-I, after 2002, stopped producing baseball players. The following table shows two students and the years they played for Brigham Young University of Idaho._

```{python}
#| label: Q1
#| code-summary: Players that attended BYU-I
con = sqlite3.connect(sql_file)
query = '''SELECT p.playerID, s.schoolID, sal.salary, c.yearID
        FROM people p 
        JOIN collegeplaying c
        ON p.playerID = c.playerID
        JOIN schools s
        ON c.schoolID = s.schoolID
        JOIN salaries sal
        ON p.playerID = sal.playerID
        WHERE s.schoolID = 'idbyuid'
        ORDER BY sal.salary DESC;
        '''
results = pd.read_sql_query(query,con)
results.index = pd.Index(range(1, len(results) + 1))
results
```


### Batting Averages

__This three-part question requires you to calculate batting average (number of hits divided by the number of at-bats)__

_In regard to batting average, the value is between the scale of 0 to 1. Players with a 1 for thier batting average means that the player hit ten out of every 10 At-Bats. If there was a player who had a batting average of 0.5, then the player hit five out of 10 At-Bats._

_a. The following table shows players with at least 1 At-Bat that year with the batting average showing highest to lowest._


```{python}
#| label: Q2.a
#| code-summary: AVG of players with 1+ At-Bat
# Query for player's AVG
con = sqlite3.connect(sql_file)
query = '''SELECT playerID, yearID, 
        CASE
          WHEN AB = 0 then 0
          ELSE ROUND(CAST(H AS FLOAT) / AB, 3)
        END AS "Batting Average"
        FROM batting
        WHERE AB >= 1
        ORDER BY "Batting Average" DESC, playerID ASC
        LIMIT 5;
        '''
results = pd.read_sql_query(query,con)
results.index = pd.Index(range(1, len(results) + 1))
results

```


_b. The following table shows players with at least 10 At-Bats that year._

```{python}
#| label: Q2.b
#| code-summary: AVG of players with 10+ At-Bat
# Query for player's AVG
con = sqlite3.connect(sql_file)
query = '''SELECT playerID, yearID, 
        CASE
          WHEN AB = 0 then 0
          ELSE ROUND(CAST(H AS FLOAT) / AB, 3)
        END AS "Batting Average"
        FROM batting
        WHERE AB >= 10
        ORDER BY "Batting Average" DESC, playerID ASC
        LIMIT 5;
        '''
results = pd.read_sql_query(query,con)
results.index = pd.Index(range(1, len(results) + 1))
results

```


_c. Lastly, the following table shows the batting average over the player's entire career, with players having 100+ At-Bats._

```{python}
#| label: Q2.c
#| code-summary: AVG of players with 100+ At-Bat entire career
# Make query for player's AVG career
con = sqlite3.connect(sql_file)
query = '''SELECT playerID,
        CASE
          WHEN SUM(AB) = 0 then 0
          ELSE ROUND(CAST(SUM(H) AS FLOAT) / SUM(AB), 3)
        END AS "Career Batting Average"
        FROM batting
        WHERE AB >= 100
        GROUP BY playerID
        ORDER BY "Batting Average" DESC, playerID ASC
        LIMIT 5;
        '''
results = pd.read_sql_query(query,con)
results.index = pd.Index(range(1, len(results) + 1))
results

```

### Team vs. Team

__Pick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph using Plotly Express to visualize the comparison. What do you learn?__

_The two teams I decided to use are the Detroit Tigers and the Seattle Mariners. The metric I chose to compare was the wins and losses for each year to see how well both teams have performed in their respective histories. Since the Detroit Tigers were founded long before the Seattle Mariners, I adjusted the years to start at 1977. From the data we learn that some years had more games in that season which results in a lot of fluctuation in our graph. The Seattle Mariners when they were founded didn't have very good starting years as opposed to the coresponding years with the Tigers. Although, during the years of 1995 and 2003 we find that the Mariners performed significantly well, while the Detroit Tigers had a rougher time. Something interesting to note though, is the fact that the wins and losses tend to show that when the Tigers are doing well the Mariners struggle and vise-versa which I thought to be an interesting coincidence._

```{python}
#| label: Q3
#| code-summary: Wins and Losses for both teams
# Query looks for two different teams then graph the wins vs. losses for both teams.
con = sqlite3.connect(sql_file)
query = '''SELECT franchID, yearID, W, L
        FROM teams
        WHERE ((franchID = 'DET') OR (franchID = 'SEA')) AND yearID >= "1977"
        '''
df = pd.read_sql_query(query,con)

df_melted = df.melt(id_vars=['franchID', 'yearID'], value_vars=['W', 'L'], var_name='Result', value_name='Count')

fig = px.line(df_melted, 
              x='yearID', 
              y='Count', 
              color='Result', 
              line_group= 'franchID',
              title='Team Performance per Year',
              facet_row='franchID', 
              labels={'yearID': 'Years', 'Count': 'Wins/Losses'}) 


fig.update_layout(
    yaxis_title="Wins/Losses",
    xaxis_title="Years",
    title={'x':0.5, 'xanchor': 'center'}
)

fig.show()
```

### Stretch

__1. Advanced Salary Distribution by Position (with Case Statement):__

_The following table shows the average salary along with the total players and highest salary for each position played._

```{python}
#| label: Stretch 1
#| code-summary: Salary per position
# Query for postition, average salary, total players, and max salary
con = sqlite3.connect(sql_file)
query = '''SELECT f.POS AS 'Position', FORMAT(ROUND(AVG(s.salary), 2),'c', 'en-US') AS 'Average Salary', COUNT(f.POS) AS 'Total Players in POS', 
        CASE
           WHEN MAX(s.salary) IS NULL THEN 'N/A'
           ELSE FORMAT(MAX(s.salary),'c','en-US') 
        END AS 'Highest Salary for POS'
        FROM fielding f
        JOIN salaries s
           ON f.playerID = s.playerID
        GROUP BY f.POS
        ORDER BY 'Average Salary' DESC
        LIMIT 10;
        '''
results = pd.read_sql_query(query,con)
results.index = pd.Index(range(1, len(results) + 1))
results

```

__2. Advanced Career Longevity and Performance (with Subqueries):__

_The following table shows the top 10 players with the longest baseball careers of all time._

```{python}
#| label: Stretch 2
#| code-summary: Top 10 longest baseball careers
# Query for player ID, name, and career length.
con = sqlite3.connect(sql_file)
query = '''SELECT asf.playerID, p.nameFirst, p.nameLast, (MAX(asf.yearID) - MIN(asf.yearID) + 1) AS career_length
        FROM allstarfull asf
           JOIN people p
              ON asf.playerID = p.playerID
        GROUP BY asf.playerID
        ORDER BY career_length DESC
        LIMIT 10;
        '''
results = pd.read_sql_query(query,con)
results.index = pd.Index(range(1, len(results) + 1))
results

```
